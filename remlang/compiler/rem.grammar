ignore [space comments]

keyword  as K := 'then', 'when',   'and',    'or', 'not'
                 'in',   'not',    'case',   'as'
            	 'end',  'where',  'from',   'yield'
            	 'into', 'let',    'True',   'False'
            	 'None', 'import', 'is';

refName  ::= ['&'] symbol;

newline  := R'\n+';
space    := R'\s+';
symbol   := R'[a-zA-Z\u4e00-\u9fa5\u3040-\u309f\u30a0-\u30ff_]{1}[a-zA-Z\u4e00-\u9fa5\u3040-\u309f\u30a0-\u30ff\d_]*';

string   := R'"([^\"]+|\\.)*?"';
comments := R'(#.*)|(((/\*)+?[\w\W]+?(\*/)+))';
number   := R'0[Xx][\da-fA-F]+|\d+(?:\.\d+|)(?:E\-{0,1}\d+|)';


operator :=    '>>',  '<<'
               '++',  '--', '**',  '//'
               '^^',  '&&', '||'
               '|>'   '>=', '<='
               '==',  '!=' '<-',
               '+',   '-',  '*',   '/',   '%'
                '>',   '<',
               '^',   '&';

T       ::= newline+;

importAs
        ::= symbol ['as' symbol];

fromImportExpr
        ::= 'from' singleArgs 'import'  '(' importAs (',' importAs)* ')';

importExpr
        ::= singleImportExpr | fromImportExpr | remImport;

singleImportExpr
        ::= 'import' singleArgs ['as' symbol];

remImport throw ['import', 'as']
        ::= 'import' string [ 'as' symbol];


const   ::= 'True' | 'False' | 'None';



# lambda currently does not support argument destruction.
singleArgs throw [',' T]
        ::= symbol ([T] ',' [T] symbol)*;

# for pattern matching
argMany throw [',' T]
        ::=  arg [([T] ',' [T] arg)+  [T]] [iterMark];

iterMark::= ',';
arg     ::= ['...'] '_'      |
            ['...']  refName |
              tupleArg       |
              string         |
              const          |
              number         ;

tupleArg throw ['(' ')', '[', ']' T]
        ::= '(' [T] [argMany [T]] ')'| '[' [T] [argMany [T]] ']';

lambdef throw ['{', '}', '|', ',', 'from', 'let', 'end', T]
        ::= '{' [T]
                ['|' [singleArgs [T]] '|']
                [T]
                [statements [T]]
            '}'
            |
            'from' [T]
                [singleArgs [T]]
            'let' [T]
                [statements [T]]
            'end'
            ;

atom  throw ['++']
        ::=  refName | const | string ('++' string)* | number |
            '(' expr ')'|
             listCons | tupleCons | setCons | dictCons | compreh |
             lambdef;

trailer throw ['!' '[' ']' '\'']
        ::= '!' '[' exprCons ']' | '\'' symbol;

atomExpr throw[T]
        ::= atom ([T] trailer)*;


invExp  ::= atomExpr (atomExpr | invTrailer)*;

invTrailer throw ['.']
        ::= '.' atomExpr;

suffix  := '??' '?';
factor  ::= ['not' | '+' | '-'] invExp [suffix];

binExp ::= factor ((operator | 'or' | 'and' | 'in' | 'is') factor)*;

caseExp throw ['case', 'end', T]
        ::= 'case' expr [T] asExp* 'end';

asExp  throw ['=>', T, 'as', 'when']
        ::= ['as' argMany]
            [
              [T] 'when' [T] expr
            ]
            [T]
            ['=>' [T] [statements]];

testExpr ::= caseExp | binExp;

where throw ['where', T, 'end']   ::= 'where' [T] [statements [T]] 'end';

expr    ::= '`' expr | testExpr (thenTrailer | applicationTrailer)* [[T] where];

thenTrailer throw ['then']
        ::= 'then' testExpr;

applicationTrailer throw ['$']
        ::= '$' testExpr;

statements throw [T]
        ::= statement ([T] statement)*;

statement
        ::= (label | let | expr | into | importExpr) [';'];

let    throw ['=' '!']
        ::= ['let'] symbol trailer* '=' expr;

exprMany throw [',', T] ::= expr [([T] ',' [T] expr)+];
unpack   throw ['...']  ::= '...' expr;
exprCons throw [',' T]    ::= exprMany ([T] ',' [T] unpack [[T] ',' [T] exprMany])* [','];

kv       throw [':', T] ::= expr ':' expr;
kvMany   throw [',', T] ::= kv [([T] ',' [T] kv)+  [T]];
kvCons   throw [',' T]  ::= kvMany ([T] ',' [T] unpack [[T] ',' [T] kvMany])* [','];

listCons  throw ['[' ']' T] ::= '[' [T] [exprCons [T]] ']';
tupleCons  throw ['(' ')' T] ::= '(' [T] [exprCons [T]] ')';
setCons  throw ['%' '{' '}' T] ::=  '%' '{' [T] [exprCons [T]] '}';
dictCons  throw ['%' '{' '}' T] ::=  '%' '{' [T] [kvCons [T]] '}';
compreh  throw['from' 'yield' T] ::=  'from' [T] exprMany [[T] 'not'] [T] 'yield' [T] lambdef;

label throw ['@'] ::= '@' symbol;
into throw ['into'] ::= 'into' symbol;

file throw [T] ::= [T] [statements [T]];
